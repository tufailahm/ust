PL/SQL Block Structure
---------------------------


PL/SQL is a block-structured language.

PL/SQL program is made up of a series of statements. A statement is terminated with a semicolon (;), not with the physical end of a line.

It has three parts, declarative part, an executable part and an exception handling part.


Variable Declarations
Declaration Syntax
variable_name type [CONSTANT][NOT NULL][:=value]
Example

DECLARE
v_Description VARCHAR2(50);
v_NumberSeats NUMBER := 45;
v_Counter BINARY_INTEGER DEFAULT 0;







PL/SQL Statements
Statements in PL/SQL


The INTO clause must be used to store a table column value into a variable declared in the DECLARATION section of PL/SQL block

SELECT ENAME INTO MEMNAME FROM EMP WHERE EMPNO=101176;

Multiple column values can be assigned to equal number of memory variables using single INTO

SELECT ENAME, SAL INTO MEMNAME, MEMSAL FROM EMP WHERE EMPNO=101176;









declare 
num1 number:=100;
begin 
dbms_output.put_line('number is :' || num1);
end;


/

















declare 
num1 number:=&num1;
begin
dbms_output.put_line('number is :' || num1);
end;
/














-------------------------------------------------------------------------------
set serveroutput on;
-------------------------------------------------------------------------------

declare
num1 number:=100;
num2 number:=200;
num3 number:= 0;
begin
num3 := num1 + num2;
dbms_output.put_line('number is :' || num3);
end;














declare
v_day NUMBER := TO_CHAR(TO_DATE('20060101','YYYYMMDD'),'D');
begin
	if v_day > 12
	then
		DBMS_OUTPUT.put_line(v_day||': Off-peak');
	else
		DBMS_OUTPUT.put_line(v_day||': Peak');
	end if;
end;













DECLARE
 v_Score Number := 85; --Percentage
 v_LetterGrade Char(1);
BEGIN
     IF v_Score >= 90 THEN
            v_LetterGrade := 'A';
        ELSIF v_Score >= 80 THEN
             v_LetterGrade := 'B';
        ELSIF v_Score >= 70 THEN
            v_LetterGrade := 'C';
       ELSIF v_Score >= 60 THEN
           v_LetterGrade := 'D';
      ELSE
           v_LetterGrade := 'E';
      END IF;
      DBMS_OUTPUT.PUT_LINE('Your Letter Grade is: ' || v_LetterGrade);
 END;
/








For Loop...

BEGIN
         FOR v_loopcounter IN 1..5 LOOP
              DBMS_OUTPUT.PUT_LINE('Loop counter is ' || v_loopcounter);
         END LOOP;
    END;
/












Table 


-------------
declare 
num1 number:=1;
num2 number:=10;
num3 number:= 0;
num4 number:=&num4;
begin
	for i in num1..num2 loop
		num3 := num4 * num1;
		num1 := num1 + 1;
		dbms_output.put_line('number is :' || num3);
	end loop;
end;
















For Loop...

BEGIN
         FOR v_loopcounter IN 1..5 LOOP
              DBMS_OUTPUT.PUT_LINE('Loop counter is ' || v_loopcounter);
         END LOOP;
    END;
/

Loops.....

DECLARE
      hundreds_counter  NUMBER(1,-2);
    BEGIN
     hundreds_counter := 100;
      LOOP
        DBMS_OUTPUT.PUT_LINE(hundreds_counter);
        hundreds_counter := hundreds_counter + 100;
      END LOOP;


/






Working With Tables...

declare
vroll varchar(20) := '1';
vmarks number;
begin
select Marks into vmarks from Student where Roll=vroll;
dbms_output.put_line('the marks is :'|| vmarks);
end;
/













declare
vroll Student.Roll%type:='&ab';
vmarks Student.Marks%type;
begin
select Marks into vmarks from Student where Roll=vroll;
dbms_output.put_line('the marks is :'|| vmarks);
end;
/










Loops:

--------------------------------------------------------------------------------

Looping, or iteration, causes the block between the keywords LOOP and END LOOP to be repeatedly executed.

The loop ends, or terminates, when an exit condition is met.


Once a loop terminates, program control is returned to the first line after the END LOOP keyword

There are three looping structures: simple(BASIC)-, WHILE, and FOR.

In the simple loop, the exit condition is embedded inside the loop body.


The first example uses EXIT:
declare 
COUNT number := 5;
LOOP
dbms('CTS');
COUNT: = COUNT + 1;
IF COUNT > 10
THEN
EXIT;
END IF;
END LOOP;



The second example uses EXIT WHEN:
LOOP
COUNT: = COUNT + 1;
EXIT WHEN COUNT > 10;
END LOOP;

-----------------------------------------------------------------------------


In the second kind of loop, the WHILE loop, the exit condition is outside the body of the loop.

The loop terminates when the condition is false, for example:
WHILE (COUNT <= 10)
LOOP
COUNT: = COUNT + 1;
END LOOP;





---------------------------------------------
DECLARE
             I NUMBER := 0;
       BEGIN
            WHILE I <= 10 
	LOOP
                 I := I + 1;
                 DBMS_OUTPUT.PUT_LINE('The value of I is ' || I);
         END LOOP;
   END;

-----------------------------------------------------------------------------


The last kind of loop, the FOR loop, iterates a predetermined number of times

FOR month_index IN 1.. 12
LOOP
	dbms_output.put_line('CTS');	
END LOOP;


declare i number;
begin
FOR i IN 1..5
LOOP
   dbms_output.put_line('CTS');
END LOOP;
end;
/




declare
i number := 100;
begin
dbms_output.put_line (i);
for idx in 2..5 loop
dbms_output.put_line (i);
end loop;
dbms_output.put_line (i);
End;

------------------------------------VARIABLES-----------------------------------




PL/SQL variables:
Scalar   --- Scalar data types hold a single value ( CHAR, VARCHAR )
Composite  -- Table , Record, vArrays
LOB (large objects)  -- CLOB, BLOB

Non PL/SQL variables:
Bind
Host

Bind Variables: A bind variable is a variable that you declare in a host environment. 

Bind variables can be used to pass run time values either number or character, into or out of one or more PL/SQL program.

Declare the variable in SQL * PLUS environment by VARIABLE key word.

VARIABLE return_code number

-----------------------------------------------------------------------
variable r number;
exec :r := 10
select * from Student where Roll = : r;

-----------------------------------------------------------------------


HOST Variables: You can access HOST variables in PL/SQL program.
VARIABLE result number

These variable should proceeded by a colon.
: Result


declare
vroll Student_G.Roll%type:='&ab';
vmarks Student_G.Marks%type;
begin
select Marks into vmarks from Student_G where Roll=vroll;
dbms_output.put_line('the marks is :'|| vmarks);
 EXCEPTION
  WHEN NO_DATA_FOUND THEN
     DBMS_OUTPUT.PUT_LINE('Roll Does not Exist');
  WHEN OTHERS THEN
     DBMS_OUTPUT.PUT_LINE('Some other error has occured');
   END;
/



----------------------------

DECLARE
      v_num1 NUMBER := &n1;
      v_num2 NUMBER := &n2;
      myResult NUMBER;
    BEGIN
      myResult := v_num1/v_num2;
      DBMS_OUTPUT.PUT_LINE('The quotient is '||TO_CHAR(myResult));
    EXCEPTION
      WHEN ZERO_DIVIDE THEN
       DBMS_OUTPUT.PUT_LINE('You cannot divide by zero');
      WHEN OTHER THEN
       DBMS_OUTPUT.PUT_LINE('Some other error has come');
   END;
/


------------------------------


           declare
              myFirstName employee.first_name%type;
           begin
             select first_name into myFirstName from employee where 1=2;
         exception
            when NO_DATA_FOUND then
              dbms_output.put_line('No Data Exists for ');
        end;












User - Defined Exceptions
----------------------------
declare
      myexcep1  exception;
      myexcep2 exception;
    begin
      case
        when '&temp' < 90.00 then raise myexcep2;
        when '&temp' > 140.00 then raise myexcep1;
        else null;
      end case;
     dbms_output.put_line('just right');
  exception
     when VALUE_ERROR then
       dbms_output.put_line('Please enter a numeric temperature (like 100)');
     when myexcep1 then
       dbms_output.put_line('way too hot...');
     when myexcep2 then
       dbms_output.put_line('way too cold...');
   end;
---------------------------------------------------------------------------------------------
DECLARE
      v_num1 NUMBER := &n1;
      v_num2 NUMBER := &n2;
      myResult NUMBER;
    BEGIN
      myResult := v_num1/v_num2;
      DBMS_OUTPUT.PUT_LINE('The quotient is '||TO_CHAR(myResult));
    EXCEPTION
      WHEN ZERO_DIVIDE THEN
       DBMS_OUTPUT.PUT_LINE('You cannot divide by zero');
   END;
/



--------------------------
IF line_count > LINES_PER_PAGE
THEN
line_count: = 0;
DBMS_SQL.PUT_LINE ('--------');
END IF;



IF a > b
THEN
dbms_OUTPUT.PUT_LINE(a);
ELSE
dbms_OUTPUT.PUT_LINE(b);
END IF;


LOOP
COUNT: = COUNT + 1;
IF COUNT > 10
THEN
EXIT;
END IF;
END LOOP;





LOOP
COUNT: = COUNT + 1;
EXIT WHEN COUNT > 10;
END LOOP;




WHILE (COUNT <= 10)
LOOP
COUNT: = COUNT + 1;
END LOOP;


-------------------------------------------------------------------------------------

A PL/SQL block can be anonymous block or named block.

Variables are memory locations, which can store data values

Variables declare in external environment are called host variable.

Scalar data types hold a single value.

Composite data types allow group of fields to be defined and manipulated in PL/SQL blocks.

An expression is a sequence of variables and literals, separated by operators.

You can change the logical flow of statements within the PL/SQL block with the following control structures.
IF-THEN-ELSE
LOOPS
WHILE LOOPS
FOR LOOPS

